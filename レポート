「最終プログラミング課題（レポート提出用）」

１． JANG CHANG HUN，201955636

２．コンセプト

・アプリ名称 : 
　ミニ弾幕ゲーム

・ユーザーは誰を想定したものか　：　
　弾幕ゲームをやったことがない人、　弾幕ゲームが好きな人

・どのようなユーザ体験や機能を提供するか
　ゲームであれば、ゲームの目的、遊び方、ルール
　どのように楽しんで貰いたいか
　どのような問題を解決するか、何を便利にするか
　何を伝えたいか等

　ミニ弾幕ゲームは周りから飛んで来る弾たちをキーボードを使って戦闘機を動かしながらできる限り長くlifeを守るゲームです。
lifeは３つがあって、弾に１回当たる度、lifeも１つずつなくなります。
すべてのlifeがなくなるとゲームは終了し、新しくゲームが始まります。
このゲームは弾幕ゲームをやったことがない人が簡単なゲームで弾幕ゲームの楽しさをわかるようにします。
一般の弾幕ゲームは難しく、難易度が高い時が多いため、初心者はすぐ興味をなくします。
その人たちのため、最も簡単な弾幕ゲームを作りました。
また、弾幕ゲームが好きな人はこのゲームを通してトレーニングができます。弾幕ゲームは練習が必要なゲームであるためです。
このゲームでは弾がランダムに出てくるので、弾幕ゲームの瞬発力や視野を広げることができます。
だからミニ弾幕ゲームは誰でも弾幕ゲームをもっと楽しめるようにするためのミニゲームです。

・新規性、工夫点、他のアプリより差別化できる点
比較対象にあるアプリの説明も含まれる。

　僕は弾幕ゲームが好きで、色々な弾幕ゲームをしたことがあります。
弾幕ゲームというのは周りから降ってくるたくさんの弾を避けて生存するゲームのことです。
しかし、このゲームは難しいというのが特徴で初心者が楽しめるようになるには少々時間がかかってしまいます。
だからせっかく楽しい弾幕ゲームを友達におすすめしても難しくてみんなすぐやめてしまいます。
私はこれをもったいないと思い、簡単な弾幕ゲームを作って初心者も楽しく始められるようにしてあげたいです。
このミニ弾幕ゲームを通して、もっと多くの人が弾幕ゲームを知り、楽しめるようにしたいです。
そのため、弾を避けるという最も大事な要素を除いて他の要素はなくし、出来る限り簡単にしました。
　

３．アプリケーションの基本機能
次のような内容を分かりやすくまとめて下さい。

・使い方（ユーザーが何を入力すると、何が起きるか）

　ユーサーがキーボードの矢印キーを押すと、その矢印キーに合わせて戦闘機が動きます。
画面の右にボタンが３つありますが、Start,Stop,Initです。
Startを押すとゲームが始まります。Stopを押すと中止されます。Initを押すと最初からやり直しができます。

・UI（画面）の基本構成（どこに、どのような機能が配置されるか）

　画面のほとんどはゲームの画面です。ゲーム画面の右には３つのボタンがあります。
Start, Stop, Initです。

・UIの画面遷移（どのボタンを押すと、画面が切り替わるなど）

　lifeが全部なくなってゲームが終了すると、弾が全てなくなって最初の画面に戻ります。戦闘機も真ん中に戻ります。
Startボタンを押すとゲームが始まります。　Stopボタンの押すとゲームの画面が止まり、ゲームも中止されます。
Initボタンを押すとゲームが最初に戻ってやり直します。
　
・ゲームであれば、ゲーム場面上に見えているオブジェクトの種類、機能、動き方

　ゲームには戦闘機、ボール、lifeが見えます。
戦闘機はキーボードの矢印キーを使って動かせます。ボールは画面の外側からランダムに降って来ます。
ボールが戦闘機に当たると当たったボールはなくなり、戦闘機のlifeが１つ減ります。
ボールは飛んで来ることもランダムに飛びます。途中で方向が変わりもします。
lifeは戦闘機の命がいくつ残っているのか見せてくれます。　lifeが０になるとゲームは終了し、やり直します。

・アルゴリズムが含まれる場合は、アルゴリズムの概要

　ボールの生成時間と飛んで来る路線がランダムになるようにMath.random()を使いました。
Math.random() * randomSeedをすることでボールが生成される時間をランダムにしました。
また、ボールの座標の変化にMath.random()を使ってランダムに座標が変わり、飛んでくる路線もランダムになるようしました。

４．システム詳細仕様

    全てのクラスの機能概要
    主要な変数の役割
    主要なメソッドの機能概要
    抽象クラスをどのように利用したか、など

mainApplet.class : アプレットを使えるようにするクラスです。　また、Button b[]を使って画面上にボタンが出れるように設定します。　各ボタンが押された時何が起きるのかもactionPerformedメソッドで決めます。

myCanvas.class : Canvasとダブルバッファーが使えるようにするクラスです。
ここで最も重要なものはキーボード入力をDanmakuPrGameクラスで使えるようにしてくれるMyKeyAdapterクラスです。

Item.class : 抽象クラスです。　Itemを継承するHeroクラスとBallクラスを簡単にしてくれます。
ここでnum変数はオブジェクトがゲームで生成される数です。

Hero.class : 戦闘機のクラスです。 health変数とX[0],Y[0]で戦闘機のlifeや位置を決めてくれます。　
戦闘機のメソッドdrawも持っています。 このメソッドでlifeが画面上に出るようにします。

Ball.class : ゲームの飛んでくるボールのクラスです。randomSeedとrandomTimeは動きや時間をランダムにするための
変数です。newballメソッドは新しいボールを生成するものです。moveメソッドはボールの動きを担当してます。
ボールがランダム時間で生成されるようにして、ランダムに動くようにしてくれるクラスです。

XBall.class : Ball.classとほぼ同じですが、Ball.classは上と下から生成されるボールで、
XBall.classは左と右から生成されるボールです。Ball.classと生成される位置、動く方向が違います。

MyKeyAdapter.class : キーボード入力をDanmakuPrGameクラスで使えるようにしてくれるクラスです。
KeyListenerをimplementsしています。

DanmakuPrGame.class : ゲームを実際に実行してくれるクラスです。runメソッドではlifeがなくなるとまたinitさせます。
timelnc変数はボールが生成される時間の間を調整できます。
collisionsメソッドはボールと戦闘機がぶつかる事を処理します。お互いの座標を利用してぶつかったのか
ぶつかなかったのかを判断します。
keyPressedはキーボードの入力を認識するメソッドです。認識されるキーに合わせて戦闘機を動かします。


５．工夫した点
ちゃんとした弾幕ゲームになるためにボールが画面の外から中へ飛んで来るようにしないといけませんでした。
だからボールが生成される位置は画面の境界になるように座標を利用して設定しました。
マウスよりキーボードで動いた方がいいと思い、キーボードで操作するようにしました。
ボールが単純な動きで飛んで来ると簡単すぎるか、避けられなくなるため、路線がランダムになるようにしました。
ボールが上、下、左、右のどっちから生成されるのか決めることはodd numberとeven numberを利用しました。
各ボールに番号を付け、odd numberかeven numberかで生成される座標を決めました。
ボールがよく見えるように赤色にしました。
ボールが上下左右から別々に飛んで来るようにすることを簡単にできる方法を考えて、
まず上と下から飛んで来るボールのクラスを作りました。
それからそれをコッピして生成される座標と動く進路を変えました。

６．苦労した点
キーボードで操作できるようにしましたが複雑なコードの中でどう再現すればいいのか迷いました。
KeyAdapterとKeyListenerをどこで使い、keyPressedをどうDanmakuPrGameクラスで使えるようにするのかが難点でした。



７．今後の課題
時間があれば実現したかった機能など。

まず、戦闘機の動きが自然ではないので、直さないといけません。
今はキーボードを押すと戦闘機が１回動いてから止まります。少し止まってから動くようになります。
キーの入力を処理する段階での問題みたいです。すごく短い時間ごと入力されているキーを認識するようにしたら
戦闘機が自然に動くと思います。
また、戦闘機が上下左右だけではなく、斜めにも動けるようにしたいと思います。キーが２つ以上同時に入力されるとき
それをどう処理するのか工夫しなければなりません。
最後に、このゲームはどれほど長く保ったのかが目標であるため、
タイマを使って現在プレイタイムを表示したいと思います。これはTimerとTimerTaskを使ってみると思います。

８．自己評価
評価には影響しないので、正直に書いて貰って大丈夫です。

昔から興味を持っていたゲームを実際に作りながら、そのようなゲームがどうやって作られるのかを
考えることができて何よりよかったと思います。
しかし、元々入れようとしたが、どう入れるのか分からなくて出来なかった機能たちがあります。
また、予想と違ってキーボードで動く戦闘機は不自然でした。
戦闘機の動きさえ柔らかくなればいいゲームになると思います。